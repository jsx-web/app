#include "client.h"
#include "config.h"

char HEX[16] = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};


// unsigned char* 转char*
char* Uchar_to_char(char* &Dest,unsigned char* Src,int Size)
{
    for(int i = 0 ; i<Size ; i++)
    {
        sprintf(Dest+i,"%c",Src[i]);
    }
    return Dest;
}

// show_hex

void show_hex(char *data, int len)
{
    for(int i =0 ; i< len ; i++)
        printf("%02x " , (unsigned char)data[i]);
    cout << endl;
}

char *hex_to_char(char **dest, char *src)
{
    int len = (unsigned char)src[1] + 2;
    cout << "len" << len << endl;
    *dest = (char*)malloc(len*2*sizeof(char)+1);
//    cout << "4" << endl;
    memset(*dest,0,len*2+1);
    int n1 , n2;
    for (int i = 0 ; i < len*2; i+=2)
    {
        n1 = (src[i/2]&0xF0)>>4;
        n2 = src[i/2]&0x0F;
        (*dest)[i] = HEX[n1];
        (*dest)[i+1] = HEX[n2];
        //cout << (*dest)[i] << " " << (*dest)[i+1] << endl;
    }
    (*dest)[len*2] = '\0';
//    cout << endl<< "=========" <<__FUNCTION__ << "===start====" << endl;
//    cout << (*dest)  << endl;
//    cout << endl<< "=========" <<__FUNCTION__ << "===end======" << endl;
    return *dest;
}

char *my_strncpy(void *Dest, void *Src, int size)
{
    char* start = (char*)Dest; // 记录目标字符串起始位置
    char* src = (char*)Src;
    char* dest = (char*)Dest;
    while (size) // 拷贝字符串
    {
        size--;
        *(dest++) = *(src++);
    }
    if (size) // 当count大于src的长度时，将补充空字符
    {
        while (--size)
        {
            *dest++ = '\0';
        }
    }
    return start;
}

float hextofloat (unsigned int number)
{
    //符号位
    unsigned int sign = number >>31;
    //幂数
    int exponent = ((number >> 23) & 0xff) - 0x7F;
    //尾数
    unsigned int mantissa = number << 9;
    float value = 0;
    float mantissa2;
    value = 0.5f;
    mantissa2 = 0.0f;
    while (mantissa)
    {
        if (mantissa & 0x80000000)
            mantissa2 += value;
        mantissa <<= 1;
        value *= 0.5f;
    }
    value = (1.0f + mantissa2) * (pow (2, exponent));
    if (sign) value = -value;
    return value;
}
/*
int tcpNonblockingRecv(int conn_sockfd, void *rx_buf, int buf_len, int timeval_sec, int timeval_usec)
{
    fd_set readset;
    struct timeval timeout = {0, 0};
    int maxfd = 0;
    int fp0 = 0;
    int recv_bytes = 0;
    int ret = 0;

    timeout.tv_sec = timeval_sec;
    timeout.tv_usec = timeval_usec;
    FD_ZERO(&readset);
    FD_SET(conn_sockfd, &readset);

    maxfd = conn_sockfd > fp0 ? (conn_sockfd+1) : (fp0+1);

    ret = select(maxfd, &readset, NULL, NULL, &timeout);
    if (ret > 0)
    {
        if (FD_ISSET(conn_sockfd, &readset))
        {
            if ((recv_bytes = recv(conn_sockfd, rx_buf, buf_len, MSG_DONTWAIT))== -1)
            {
                perror("recv");
                return -1;
            }
        }
    }
    else
    {
        return -1;
    }

    return recv_bytes;
}
*/

bool Uchar_to_cp56time2a(unsigned char *date,st_cp56time2a *time)
{
    //01（毫秒低位）02（毫秒高位）03（分钟）04（时）81（日与星期）09（月）10（年）
    //unsigned char date1[7] = {0x01 ,0x02,0x03,0x04,0x81,0x09,0x10};
    uint64_t Time;
    uint64_t tmp;
    Time &= 0x0;
    tmp &= 0x0;
    for(int i=6; i>=0 ; i--)
    {
        tmp|=date[i];
        tmp = tmp<<i*8;
        Time|=tmp;
        tmp &= 0x0;
    }
    time->Time = Time;

    return true;
}

bool cp56time2a_to_char(char (&date)[7],st_cp56time2a time)
{
    char *show ;
    show= new char[64];
    memset(show,0,64);
//    sprintf(show,"20%02d.%d.%d",time.Compts.year,time.Compts.month,time.Compts.mday);
//    sprintf(show,"%s\ntime:%dth %02d:%02d:%04d",show,time.Compts.wday,time.Compts.hour,
//                                                    time.Compts.min,time.Compts.msec);
    //cout << show <<endl;
    memset(date,0,7);
    //printf("%014lx ",(time.Time));
    for (int i = 6; i >= 0; i--)
    {
        date[i] = (((time.Time)>>(i*8))&0xFF);
    }
    for (int i = 6; i >= 3; i--)
    {
        char tmp = date[i];
        date[i] = date[6-i];
        date[6-i] = tmp;
    }
    return true;
}

QString get_cp56time2a_string(st_cp56time2a *time)
{
    char date[7];
    cp56time2a_to_char(date,*time);
    return QString(date);
}

uint64_t get_cp56time2a_hex(st_cp56time2a *time)
{
    return time->Time;
}

void show_str(char *buf, int len)
{
    for(int i =0 ; i< len ; i++)
        printf("%c" ,buf[i]);
    cout << endl;
}
